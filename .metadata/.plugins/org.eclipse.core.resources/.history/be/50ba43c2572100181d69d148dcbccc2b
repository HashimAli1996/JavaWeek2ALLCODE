
public class PaintWizard {

		double cheapoMaxPrice = 19.99;
		double averageJoePrice = 17.99;
		double duluxPaints = 25.00;
		
		int cpAreaPerLitre = 10;
		int ajAreaPerLitre = 11;
		int dpAreaPerLitre = 20;
		
		int cpLitre = 20;
		int ajLitre = 15;
		int dpLitre = 10;
		
	
	public static void main(String[] args) {
		
		CheapoMax cp = new CheapoMax();
		AverageJoe aj = new AverageJoe();
		DuluxPaints dp = new DuluxPaints();
		
		System.out.println(cheapestTubOfPaint(200, cp, aj, dp));
		System.out.println(leastWasted(200, cp, aj, dp));
		
		//System.out.println(cp.waste(300));
		
		//System.out.println(cheapestTubOfPaint(10, cp, aj, dp));
		
	}
	
	public static String cheapestTubOfPaint(int areaToBePainted, CheapoMax cp, AverageJoe aj, DuluxPaints dp) {		
		
		if (cp.tubsOfPaint(areaToBePainted) < aj.tubsOfPaint(areaToBePainted) 
				&& 
				cp.tubsOfPaint(areaToBePainted) < dp.tubsOfPaint(areaToBePainted)) {
			return "CheapoMax costs: " + cp.tubsOfPaint(areaToBePainted) + " and is the cheapest";
		} else if (aj.tubsOfPaint(areaToBePainted) < cp.tubsOfPaint(areaToBePainted) 
				&& 
				aj.tubsOfPaint(areaToBePainted) < dp.tubsOfPaint(areaToBePainted)) {
			return "AverageJoe costs: " + aj.tubsOfPaint(areaToBePainted) + " and is the cheapest";
		} else if (dp.tubsOfPaint(areaToBePainted) < cp.tubsOfPaint(areaToBePainted) 
				&& 
				dp.tubsOfPaint(areaToBePainted) < aj.tubsOfPaint(areaToBePainted)){
			return "DuluxPaint costs: " + dp.tubsOfPaint(areaToBePainted) + " and is the cheapest";
		}
		return "no cheap pent mayn";
	}
	
public static String leastWasted(int areaToBePainted, CheapoMax cp, AverageJoe aj, DuluxPaints dp) {		
		
		if (cp.waste(areaToBePainted) < aj.waste(areaToBePainted) 
				&& 
				cp.waste(areaToBePainted) < dp.waste(areaToBePainted)) {
			return "CheapoMax wastes: " + cp.waste(areaToBePainted) + " and is the lowest wasted";
		} else if (aj.waste(areaToBePainted) < cp.waste(areaToBePainted) 
				&& 
				aj.waste(areaToBePainted) < dp.waste(areaToBePainted)) {
			return "AverageJoe wastes: " + aj.waste(areaToBePainted) + " and is the lowest wasted";
		}
		return "DuluxPaint wastes: " + dp.waste(areaToBePainted) + " and is the lowest wasted";
	}
}